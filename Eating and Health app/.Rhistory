y = as.vector(t(outer(c('a', 'b', 'c', 'd', 'e'), c('a', 'b', 'c', 'd', 'e', paste, sep="")))
y = as.vector(t(outer(c('a', 'b', 'c', 'd', 'e'), c('a', 'b', 'c', 'd', 'e'), paste, sep="")))
y
y = as.vector(outer(c('a', 'b', 'c', 'd', 'e'), c('a', 'b', 'c', 'd', 'e'), paste, sep=""))
y
split(Names)
Names="John Andrew Thomas"
split(Names)
strsplit(Names)
strsplit(Names, split =" ")
paste(strsplit(Names, split =" "), "@gmail.com")
paste(as.vector(strsplit(Names, split =" ")), "@gmail.com")
paste(strsplit(Names, split =" "), "@gmail.com", collapse = ";")
paste(strsplit(Names, split =" ")[1], "@gmail.com", collapse = ";")
strsplit(Names, split =" ")[1]
as.vector(strsplit(Names, split =" "))
?strsplit
strsplit(Names, split =" ")[[1]]
fib = c(1, 2, rep(0, 100))
paste(strsplit(Names, split =" ")[[1]], "@gmail.com", collapse = ";")
fib = c(1, 2, rep(0, 100))
paste0(strsplit(Names, split =" ")[[1]], "@gmail.com", collapse = ";")
ma = matrix(1:12, 4,3)
ma2 = matrix(1:12, 3, 4)
ma2 = c(1:4)
ma %*% ma2
ma2 = c(1:3)
ma %*% ma2
mat = matrix(1:6, nrow=2, ncol=3)
apply(mat, 1, sum)
mat
?apply
mu't'
apply(mat, 1, *)
mat[1]
mat[1,]
mat[1,]*c(1,2,3)
sum(mat[1,]*c(1,2,3))
matmult = function(ma, vec){
m = nrow(mat)
n = ncol(mat)
if (n!=nrow(vec)){
return("cannot multiply")
}
mat2 = matrix(0, nrow(mat), 1)
i = 1
while (i<=m){
mat2[[i]]=sum(ma[1,]*vec)
i++
}
return(mat2)
# or just return(ma %*% vec)
}
while(i<=m){
mat2[[i]]=sum(ma[1,]*vec)
i++
}
matmult = function(ma, vec){
m = nrow(mat)
n = ncol(mat)
if (n!=nrow(vec)){
return("cannot multiply")
}
mat2 = matrix(0, nrow(mat), 1)
i = 1
while(i<=m){
mat2[[i]]=sum(ma[1,]*vec)
i = i+1
}
return(mat2)
# or just return(ma %*% vec)
}
matmult(ma, ma2)
ma
ma2
nrow(ma)
ncol(ma)
if (3 !=3) {
return("cannot multiply")
}
matmult = function(ma, vec){
m = nrow(mat)
n = ncol(mat)
if (n != length(vec)){
return("cannot multiply")
}
mat2 = matrix(0, nrow(mat), 1)
i = 1
while(i<=m){
mat2[[i]]=sum(ma[1,]*vec)
i = i+1
}
return(mat2)
# or just return(ma %*% vec)
}
matmult(ma, ma2)
mat2 = matrix(0, nrow(mat), 1)
mat2
matmult = function(ma, vec){
m = nrow(mat)
n = ncol(mat)
if (n != length(vec)){
return("cannot multiply")
}
mat2 = matrix(0, nrow(ma), 1)
i = 1
while(i<=m){
mat2[[i]]=sum(ma[1,]*vec)
i = i+1
}
return(mat2)
# or just return(ma %*% vec)
}
matmult(ma, ma2)
ma
ma2
matmult = function(ma, vec){
m = nrow(mat)
n = ncol(mat)
if (n != length(vec)){
return("cannot multiply")
}
mat2 = matrix(0, nrow(ma), 1)
i = 1
while(i<=m){
mat2[[i]]=sum(ma[,i]*vec)
i = i+1
}
return(mat2)
# or just return(ma %*% vec)
}
matmult(ma, ma2)
matmult = function(ma, vec){
m = nrow(mat)
n = ncol(mat)
if (n != length(vec)){
return("cannot multiply")
}
mat2 = matrix(0, nrow(ma), 1)
i = 1
while(i<=m){
mat2[[i]]=sum(ma[i,]*vec)
i = i+1
}
return(mat2)
# or just return(ma %*% vec)
}
matmult(ma, ma2)
mat2 = matrix(0, nrow(ma), 1)
mat2
mat2 = matrix(1:4, nrow(ma), 1)
mat2
mat2[[3]]
ma[1,]
vec[1]
ma2[1]
ma2[2]
ma[1,]*ma2
sum( ma[1,]*ma2)
matmult = function(ma, vec){
m = nrow(ma)
n = ncol(ma)
if (n != length(vec)){
return("cannot multiply")
}
mat2 = matrix(0, nrow(ma), 1)
i = 1
while(i<=m){
mat2[[i]]=sum(ma[i,]*vec)
i = i+1
}
return(mat2)
# or just return(ma %*% vec)
}
matmult(ma, ma2)
matmult = function(ma, vec){
m = nrow(ma)
n = ncol(ma)
if (n != length(vec)){
return("cannot multiply")
}
mat2 = matrix(0, nrow(ma), 1)
for (i in mat2 ){
mat2[[i]]=sum(ma[i,]*vec)
}
return(mat2)
# or just return(ma %*% vec)
}
matmult(ma, ma2)
vec2 = rep(0, length(vec))
vec2 = rep(0, 4
)
vec2
MAD = function(vec){
med = median(vec)
i = 1
vec2 = rep(0, length(vec))
while(i <=length(vec)){
vec2[i]=abs(vec[i]-med)
}
return(median(vec2))
}
MAD(c(1,2,3,4))
MAD = function(vec){
med = median(vec)
i = 1
vec2 = rep(0, length(vec))
while(i <=length(vec)){
vec2[i]=abs(vec[i]-med)
i = i+1
}
return(median(vec2))
}
MAD(c(1,2,3,4))
MAD(c(1,2,3,4,5))
median(c(1,2,3,4,5))
vec2 = rep(0,length(c(1,2,3,4,5)))
vec2
MAD(c(1,1,3,5,5))
df(1:6, 2, 3)
df(matrix(1:6, 2, 3))
matrix(1:6, 2, 3)
data.frame(matrix(1:6, 2, 3))
a=data.frame(matrix(1:6, 2, 3))
switch(a$X1, 1 = 3, 2 = 4 )
switch(EXPR:a$X1, 1 = 3, 2 = 4 )
?switch
switch(i,1=3, 2 = 4 )
switch(i,(1 = 3), (2 = 4) )
a=data.frame(matrix(1:6, 2, 3))
for(i in a$X1){
switch(i ,(1 = 3), (2 = 4) )
}
switch(i ,1 = 3, 2 = 4 )
a=data.frame(matrix(a, 2, 3))
a
a=data.frame(matrix("a", 2, 3))
switcher = function(x){
switch
}
switch(i ,"a" = 3, 2 = 4 )
switch(i ,"a" = 3, 2 = "4" )
switch(i ,"a" = "3", "2" = "4" )
mtcars
shiny::runApp('bootcamp008/R/Intro to Shiny/RoyceHo')
runApp('bootcamp008/R/Intro to Shiny/RoyceHo')
View(mtcars)
?mtcars
runApp('bootcamp008/R/Intro to Shiny/RoyceHo')
runApp('bootcamp008/R/Intro to Shiny/RoyceHo')
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
runApp('bootcamp008/R/Intro to Shiny/RoyceHo')
runApp('bootcamp008/R/Intro to Shiny/RoyceHo')
library(googleVis)
demo(googleVis)
library(googleVis)
scatter <- gvisScatterChart(mtcars[,c("wt", "mpg")])
plot(scatter,"chart")
plot(scatter)
print(scatter)
my_options <- list(width="600px", height="300px",
title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
plot(gvisScatterChart(dt,options=my_options),"chart")
plot(gvisScatterChart(dt,options=my_options))
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$mpg <- NULL
head(dt)
my_options <- list(width="600px", height="300px",
title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
plot(gvisScatterChart(dt,options=my_options))
plot(gvisScatterChart(dt,options=my_options),"chart")
plot(gvisScatterChart(dt,options=my_options),"chart")
plot(gvisScatterChart(dt,options=my_options))
scatter <- gvisScatterChart(dt)
plot(scatter,"chart")
plot(scatter)
explorer="{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options), "chart")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options))
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_4.html.tooltip <- rownames(dt)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_6.html.tooltip <- rownames(dt)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$cyl_8.html.tooltip <- rownames(dt)
dt$mpg <- NULL
head(dt)
install.packages("leaflet")
library(leaflet)
plot(gvisScatterChart(dt,options=my_options))
leaflet() %>% addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-74.0059, lat=40.7128, popup="New York City")
leaflet_andrew <- leaflet(Andrew) %>%
addTiles() %>%
addPolylines(~Long, ~Lat)
leaflet_andrew
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addProviderTiles("Esri.WorldStreetMap")
leaflet_andrew
ui <- fluidPage(
leafletOutput("mymap")
)
shinyApp(ui, server)
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(Andrew) %>%
addProviderTiles("Esri.WorldStreetMap") %>%
addPolylines(~Long, ~Lat)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(Andrew) %>%
addProviderTiles("Esri.WorldStreetMap") %>%
addPolylines(~Long, ~Lat)
})
}
shinyApp(ui, server)
ui <- fluidPage(
leafletOutput("mymap"),
br(),
checkboxInput("show", "Show States", value = FALSE)
)
leaflet_andrew <- leaflet_andrew %>%
addProviderTiles("Esri.WorldStreetMap")
shinyApp(ui, server)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(Andrew) %>%
addProviderTiles("Esri.WorldStreetMap") %>%
addPolylines(~Long, ~Lat)
})
observeEvent(input$show, {
proxy <- leafletProxy("mymap")
if(input$show) {
proxy %>% addPolygons(data=colStates, stroke = FALSE,
fillColor = heat.colors(6, alpha = 1),
layerId = LETTERS[1:6])
} else {
proxy %>% removeShape(layerId = LETTERS[1:6])
}
})
}
shinyApp(ui, server)
colStates <- map("state", fill = TRUE, plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
library(map)
library(map)
library(mapproj)
library(maps)
library(mapproj)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(Andrew) %>%
addProviderTiles("Esri.WorldStreetMap") %>%
addPolylines(~Long, ~Lat)
})
observeEvent(input$show, {
proxy <- leafletProxy("mymap")
if(input$show) {
proxy %>% addPolygons(data=colStates, stroke = FALSE,
fillColor = heat.colors(6, alpha = 1),
layerId = LETTERS[1:6])
} else {
proxy %>% removeShape(layerId = LETTERS[1:6])
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(Andrew) %>%
addProviderTiles("Esri.WorldStreetMap") %>%
addPolylines(~Long, ~Lat)
})
observeEvent(input$show, {
proxy <- leafletProxy("mymap")
if(input$show) {
proxy %>% addPolygons(data=colStates, stroke = FALSE,
fillColor = heat.colors(6, alpha = 1),
layerId = LETTERS[1:6])
} else {
proxy %>% removeShape(layerId = LETTERS[1:6])
}
})
}
colStates <- map("state", fill = TRUE, plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
shinyApp(ui, server)
shinyApp(ui, server)
if (!require('devtools')) install.pactages('devtools')
devtools::install_github('rstudio/leaflet')
install.packages('leaflet')
shiny::runApp('bootcamp008/Projects/Eating and Health app')
shiny::runApp('bootcamp008/Projects/Eating and Health app')
shiny::runApp()
